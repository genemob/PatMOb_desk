package patmob.core;

import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import patmob.util.PatmobFind;
import patmob.data.PatentTreeNode;

/**
 * The application's main window.
 */
class PatmobView extends FrameView implements TreeNodeInfoDisplayer {
    private Controller patmobController;

    void setController(Controller controller) {
        patmobController = controller;
    }

    void addMenu(javax.swing.JMenu menu) {
        menuBar.add(menu);
        setMenuBar(menuBar);
    }

    public PatmobView(SingleFrameApplication app) {
        super(app);
        initComponents();
    }

    public javax.swing.JTextArea printMessage(String message) {
        jTextArea1.setText(message);
        return jTextArea1;
    }

    public void setTree(javax.swing.JTree tree) {
        jTree1 = tree;
        jScrollPane2.setViewportView(jTree1);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        xmlMenuItem = new javax.swing.JMenuItem();
        editMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        findMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        mainPanel.setName("mainPanel"); // NOI18N

        jSplitPane1.setName("jSplitPane1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setName("jTextArea1"); // NOI18N
        jScrollPane1.setViewportView(jTextArea1);

        jSplitPane1.setRightComponent(jScrollPane1);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTree1.setName("jTree1"); // NOI18N
        jScrollPane2.setViewportView(jTree1);

        jSplitPane1.setLeftComponent(jScrollPane2);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(PatmobView.class);
        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setText(resourceMap.getString("newMenuItem.text")); // NOI18N
        newMenuItem.setName("newMenuItem"); // NOI18N
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);

        xmlMenuItem.setText(resourceMap.getString("xmlMenuItem.text")); // NOI18N
        xmlMenuItem.setName("xmlMenuItem"); // NOI18N
        xmlMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xmlMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(xmlMenuItem);

        editMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        editMenuItem.setText(resourceMap.getString("editMenuItem.text")); // NOI18N
        editMenuItem.setName("editMenuItem"); // NOI18N
        editMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuItemActionPerformed1(evt);
            }
        });
        fileMenu.add(editMenuItem);

        deleteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        deleteMenuItem.setText(resourceMap.getString("deleteMenuItem.text")); // NOI18N
        deleteMenuItem.setName("deleteMenuItem"); // NOI18N
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(deleteMenuItem);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(PatmobView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        findMenuItem.setText(resourceMap.getString("findMenuItem.text")); // NOI18N
        findMenuItem.setName("findMenuItem"); // NOI18N
        findMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(findMenuItem);

        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItem1);

        menuBar.add(helpMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    //"New Collection" MenuItem
    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        patmobController.newCollection();
    }//GEN-LAST:event_newMenuItemActionPerformed

    //"Edit Node..." MenuItem
    private void editMenuItemActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMenuItemActionPerformed1
        PatentTreeNode ptNode = getSelectedNode();
        if (ptNode!=null) {
            patmobController.editNode(ptNode);
        }
    }//GEN-LAST:event_editMenuItemActionPerformed1

    //"Delete Collection..." MenuItem
    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
        PatentTreeNode ptNode = getSelectedNode();
        if (ptNode!=null) {
            int i = JOptionPane.showConfirmDialog(jTree1,
                    "Do you want to delete \"" + ptNode + "\"?");
            if (i==JOptionPane.YES_OPTION)
                patmobController.deleteNode(ptNode);
        }
    }//GEN-LAST:event_deleteMenuItemActionPerformed

    //"Load from XML..." MenuItem
    private void xmlMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xmlMenuItemActionPerformed
        patmobController.loadXML();
    }//GEN-LAST:event_xmlMenuItemActionPerformed

    private void findMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findMenuItemActionPerformed
        new PatmobFind(patmobController).setVisible(true);
    }//GEN-LAST:event_findMenuItemActionPerformed

    //About box
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if (aboutBox == null) {
//            JFrame mainFrame = App.getApplication().getMainFrame();
            aboutBox = new About(this.getFrame(), true);
            aboutBox.setLocationRelativeTo(this.getFrame());
        }        
        aboutBox.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    PatentTreeNode getSelectedNode() {
        PatentTreeNode ptn = null;
        TreePath selectionPath = jTree1.getSelectionPath();
        if (selectionPath==null) {
            JOptionPane.showMessageDialog(jTree1, "Please select a tree node first");
        } else {
            DefaultMutableTreeNode dmtn = (DefaultMutableTreeNode)
                    selectionPath.getLastPathComponent();
            if (dmtn==jTree1.getModel().getRoot()) {
                JOptionPane.showMessageDialog(jTree1,
                        "Please select a tree node which is not a root");
            } else ptn = (PatentTreeNode) dmtn.getUserObject();
        }
        return ptn;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenuItem editMenuItem;
    private javax.swing.JMenuItem findMenuItem;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTree jTree1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem xmlMenuItem;
    // End of variables declaration//GEN-END:variables

    private JDialog aboutBox;

    @Override
    public void displayNodeInfo(PatentTreeNode ptNode) {
        jTextArea1.setText(ptNode.getInfo());
    }

    @Override
    public void displayText(String text) {
        jTextArea1.setText(text);
    }
}
